# Main docker-compose
# Suited for containerized SSR server.
version: "2.2"

services:

  ## WEB SERVER / GATEWAY

  nginx:
    build:
      context: ./containers/nginx
      dockerfile: ./Dockerfile.dev-ssr
    mem_limit: 512MB
    depends_on:
      - php-fpm
      - php-rr
    networks:
      - app
    ports:
      - "8080:80"
    environment:
      - UPSTREAM_ENDPOINT
    volumes:
      - ./front/:/var/www/Minds/front:cached
      - ./embedded-comments/:/var/www/Minds/embedded-comments
      - ./embedded-boosts/:/var/www/Minds/embedded-boosts

  ## APP ENGINE

  php-fpm:
    build:
      context: ./engine
      dockerfile: ./containers/php-fpm/Dockerfile.dev
    mem_limit: 512MB
    depends_on:
      - cassandra
      - elasticsearch
      - redis
      - pulsar
      - mysql
    networks:
      - app
    volumes:
      - ./front/:/var/www/Minds/front:cached
      - ./engine/:/var/www/Minds/engine:cached
      - keys:/.dev

  php-rr:
    build:
      context: ./engine
      dockerfile: ./containers/php-rr/Dockerfile.dev
    mem_limit: 512MB
    depends_on:
      - cassandra
      - elasticsearch
      - redis
      - pulsar
      - mysql
    networks:
      - app
    ports:
      - "9001:9001"
      - "2112:2112"
    volumes:
      - ./engine/:/var/www/Minds/engine:cached
      - keys:/.dev

  runners:
    build:
      context: ./engine
      dockerfile: ./containers/php-runners/Dockerfile
    depends_on:
      - cassandra
      - elasticsearch
      - redis
    networks:
      - app
    volumes:
      - ./front/:/var/www/Minds/front:cached
      - ./engine/:/var/www/Minds/engine:cached
      - keys:/.dev

  sockets:
    build:
      context: ./sockets
      dockerfile: ./Dockerfile
    environment:
      - PORT=3000
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET=<!!! set this to jwt-token in your engine/settings.php !!!>
      - CASSANDRA_SERVERS=cassandra
      - CASSANDRA_KEYSPACE=minds
    networks:
      - app
    depends_on:
      - redis
      - cassandra
    volumes:
      - keys:/.dev
    ports:
      - 3000:3000

  ## Vault

  vault:
    image: hashicorp/vault
    networks:
      - app
    environment:
      VAULT_ADDR: "http://0.0.0.0:8200"
      VAULT_API_ADDR: "http://0.0.0.0:8200"
    cap_add:
      - IPC_LOCK
    ports:
      - 8200:8200
    volumes:
      - vault:/vault/file:rw
    entrypoint: vault server -dev -dev-listen-address="0.0.0.0:8200" -dev-root-token-id="root"

  ## DATABASES

  cassandra:
    build:
      context: ./containers/cassandra
    environment:
      - CASSANDRA_START_RPC=true
      - MAX_HEAP_SIZE=768M
      - HEAP_NEWSIZE=512M
    networks:
      - app
    mem_limit: 1024MB
    volumes:
      - cassandra-data:/var/lib/cassandra
    healthcheck:
      test: "cqlsh -e 'DESC TABLE system.batches'"
      retries: 10
      timeout: 5s
      interval: 15s

  wait-for-cassandra:
    build:
      context: ./containers/wait-for-cassandra
    networks:
      - app
    depends_on:
      - cassandra

  elasticsearch:
    image: amazon/opendistro-for-elasticsearch:1.13.2
    mem_limit: 1G # keep an eye
    ulimits:
      nproc: 65536
      memlock:
        soft: 65536
        hard: 65536
      nofile:
        soft: 65536
        hard: 65536
    environment:
      - "ES_JAVA_OPTS=-Xms726m -Xmx726m"
      - discovery.type=single-node
      - DISABLE_INSTALL_DEMO_CONFIG=true
      - opendistro_security.disabled=true
      - cluster.routing.allocation.disk.watermark.low=95%
      - cluster.routing.allocation.disk.watermark.high=99%
      - cluster.routing.allocation.disk.watermark.flood_stage=99%
    networks:
      - app
    ports:
      - "9200:9200"
    volumes:
      - opendistro-data:/usr/share/elasticsearch/data

  ## CACHE

  redis:
    image: redis:6.2.7-alpine
    mem_limit: 100MB # keep an eye
    networks:
      - app
    ports:
      - "6379:6379"

  ## INSTALLATION ARTIFACTS

  installer:
    build:
      context: ./engine
      dockerfile: ./containers/installer/Dockerfile
    networks:
      - app
    volumes:
      - ./front/:/var/www/Minds/front:delegated
      - ./engine/:/var/www/Minds/engine:delegated
      - keys:/.dev
    depends_on:
      cassandra:
        condition: service_healthy

  elasticsearch-provisioner:
    build:
      context: ./containers/elasticsearch-provisioner
    networks:
      - app
    depends_on:
      - elasticsearch

  ## Pulsar

  pulsar:
    image: apachepulsar/pulsar:2.11.2
    entrypoint: bin/pulsar standalone -nss
    networks:
      - app
    ports:
      - 6650:6650
      - 8088:8080
    volumes:
      - pulsardata:/pulsar/data
      - pulsarconf:/pulsar/conf

  ## MySQL

  mysql:
    image: mysql:8.0
    networks:
      - app
    ports:
      - 3306:3306
    environment:
      MYSQL_ALLOW_EMPTY_PASSWORD: "true"
      MYSQL_USER: "user"
      MYSQL_PASSWORD: "changeme"
      MYSQL_DATABASE: "minds"
    volumes:
      - mysql:/var/lib/mysql

  mysql-provisioner:
    build:
      context: ./containers/mysql-provisioner
    networks:
      - app
    depends_on:
      - mysql

  ## METASCRAPER SERVER

  metascraper:
    image: registry.gitlab.com/minds/developers/metascraper-server
    mem_limit: 512MB
    networks:
      - app
    ports:
      - "3334:3334"

  ## UTILITIES

  kibana:
    image: docker.elastic.co/kibana/kibana-oss:6.6.2
    depends_on:
      - elasticsearch
    environment:
      ELASTICSEARCH_URL: http://minds_elasticsearch_1:9200
    networks:
      - app
    ports:
      - "5601:5601"

volumes:
  cassandra-data:
  elasticsearch-data:
  opendistro-data:
  keys:
  pulsardata:
  pulsarconf:
  mysql:
  vault:

networks:
  app:
    driver: "bridge"
